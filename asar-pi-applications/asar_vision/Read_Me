# _Automatic Image Processing_ 
**Calibration Routine**
* This needs to be ran at the very beginning of a simulation.
* The calibration routine will walk you through clicking each individual color as well as the corners of the terrain in case of automation failure
* Once the calibration is done, the values printed out for color need to be input into the "Get RGB code"
* The corners of the terrain need to be input into the destination points backup for the homography
* This only needs to be done once unless the camera is bumped moving it significantly from its original position.

**Homography Automated**
* This is the main script that can be called.
* Within this file, all of the attributes of the terrain will be found and returned.
* An image is received from the raspberry pi that will the be processed. 
* After all processing is done, the tile attributes will be packaged into a json file named "Terrain.txt" and then sent to the path planning algorithm.

**Four Corners**
* The four corners of the terrain are automatically identified and marked as the source points for the image perspective transformation.
* This is where the hardcoded values that were obtained in the calibration routine will be held in the case that the corners are not able to be automatically found.

**Get Attributes**
* This script is responsible for finding all important parameters of the terrain.
* Within it, the color and coordinates of each tile are found.

**Get Coordinates**
* This script takes in the pixel values of each centroid of the hexagons within the terrain and classifies them as specific coordinats (1-8,1-8) on the grid for easier referencing.
* Once all nodes are classified, the coordinated values are added to the "coordinate" key in the hexagon attribute dictionary.

**Get RGB Color**
* This script gets the average pixel color value in the center of each identified hexagon
* Once the average HSV pixel color is found, it is converted to RGB and classified as one of the predetermined colors that were found in the calibration routine.
* The identified colors are added to the "Color" key within the hexagon attributes dictionary.

**Get Missing Terrain**
* This script looks at the coordinate list that was made by identifying hexagons on the terrain and compares it to the ideal coordinate list where all hexagons are found.
* If there are any missing points, the coordinate list is appended with the missing value and the color list is appended with an impassable terrain. If we dont know what is there, we cannot travel through it safely.

**Detect Shapes**
* This is the script responsible for finding the shapes within the terrain by finding the contour and counting the verticies.

**Shape Detection Test**
* If the shapes are not being identified, you can see exactly what the camera is seeing by running the image through this test script.

**Real Time HSV Codes**
* When Making masks, this script can be used to see what the mask will do block out or pass. The slider bars on the top are used to adjust the HSV values.

**Converter**
* This is used to make the upper and lower bounds of the masks that you make using the real time HSV code script.

**Utils**
* This allows you to clock the image in the calibration routine and have it return the values for the four corners to you as well as showing you where you clicked.

